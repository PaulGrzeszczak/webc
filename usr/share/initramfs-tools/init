#!/bin/sh
tmpfs_size="10M"

devtmpfs_old () {
	echo "W: devtmpfs not available, falling back to tmpfs for /dev"
	mount -t tmpfs -o size=$tmpfs_size,mode=0755 udev /dev
	[ -e /dev/console ] || mknod -m 0600 /dev/console c 5 1
	[ -e /dev/null ] || mknod /dev/null c 1 3
}

fs_init () {
	local root="$1"
	for d in /dev /root /sys /proc /tmp /var /mnt /run; do
		[ -d $root$d ] || mkdir $root$d
	done
	chmod 0755 $root/dev
	chmod 0700 $root/root
	mount -t sysfs -o nodev,noexec,nosuid sysfs $root/sys
	mount -t proc -o nodev,noexec,nosuid proc $root/proc
	[ -e /etc/udev/udev.conf ] && . /etc/udev/udev.conf
	mount -t tmpfs  -o "noexec,nosuid,size=$tmpfs_size,mode=1777" tmpfs $root/tmp
	mount -t tmpfs  -o "noexec,nosuid,size=$tmpfs_size,mode=0755" tmpfs $root/var
	mount -t tmpfs  -o "noexec,nosuid,size=$tmpfs_size,mode=0755" tmpfs $root/run
	mount -t devtmpfs -o "noexec,nosuid,mode=0755" udev $root/dev || devtmpfs_old
	subdirs="/var/lock /var/run /run/initramfs /dev/pts /mnt/cd /mnt/flash /mnt/git /mnt/rw /mnt/root"
	subdirs="${subdirs} /var/spool /var/log /var/tmp /var/lib"
	for d in $subdirs; do
		test -d $root$d || mkdir $root$d
	done
	mount -t devpts -o "noexec,nosuid,gid=5,mode=0620" devpts $root/dev/pts || true
}
fs_clean() {
	local root="$1"
	for d in sys proc tmp var run; do
		test -d $root/$d || continue
		umount $root/$d
	done
}

udev_root_rule() {
  local udevroot="$1"
  [ -e $udevroot/rules.d/61-dev-root-link.rules ] && return 0

  eval $(udevadm info --export --export-prefix=ROOT_ --device-id-of-file=/ || true)
  [ "$ROOT_MAJOR" -a "$ROOT_MINOR" ] || return 0

  echo 'ACTION=="add|change", SUBSYSTEM=="block", ENV{MAJOR}=="'$ROOT_MAJOR'", ENV{MINOR}=="'$ROOT_MINOR'", SYMLINK+="root"' \
    > $udevroot/root-link-rule
  mv $udevroot/root-link-rule $udevroot/rules.d/61-dev-root-link.rules
}

udev_init () {
	. /etc/udev/udev.conf
	mkdir -p /etc/udev/rules.d/
    udev_root_rule /etc/udev/
	echo > /sys/kernel/uevent_helper
	/lib/udev/create_static_nodes || true 
	udevd --daemon --resolve-names=never
	udevadm trigger --action=add --type=subsystems
	udevadm trigger --action=add --type=devices
	udevadm settle
}

root_init() {
	mount -t ext3 /dev/sda1 /mnt/root
	# merge any changes i, use ours until debian git supports theirs
	( 
	cd /mnt/root
	test -e .git && git merge -s ours origin/master
	)
}

udev_exit() {
	killall udevd &>/dev/null
}

module_init() {
	local mods="squashfs sd_mod sr_mod cdrom libata ata_piix loop"
	for m in $mods; do
		modprobe -q $m
	done
}
opts_has() {
	for i in $OPTS; do
		[[ $i = $1 ]] && return 0
	done
	return 1
}

fs_init /
OPTS=$(cat /proc/cmdline)
module_init
udev_init
udevadm settle
root_init
udev_exit

fs_clean /
fs_init /mnt/root
opts_has debug_initramfs && sh
runlevel=2
opts_has 1 && runlevel=1
exec chroot /mnt/root /sbin/init $runlevel $opts 
